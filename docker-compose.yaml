version: '3.9'
services:
  nginx-proxy:
    image: nginxproxy/nginx-proxy:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro

  zeebe-kafka-worker:
    image: zeebe-kafka-worker:latest
    deploy:
      replicas: 3
    environment:
      ZEEBE_GATEWAY_ADDRESS: zeebe:26500
      KAFKA_BROKERS: kafka:9092
    depends_on:
      - zeebe
      - kafka
      - init-kafka

  zeebe-play:
    image: ghcr.io/camunda-community-hub/zeebe-play:1.10.1
    environment:
      ZEEBE_ENGINE: remote
      ZEEBE_CLIENT_BROKER_GATEWAYADDRESS: zeebe:26500
      ZEEBE_CLOCK_ENDPOINT: zeebe:9600/actuator/clock
      ZEEBE_CLIENT_WORKER_HAZELCAST_CONNECTION: zeebe:5701
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-zeebe-play:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: zeebe
      SPRING_DATASOURCE_DRIVERCLASSNAME: org.postgresql.Driver
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_HIBERNATE_DLL_AUTO: create
      VIRTUAL_HOST: zeebe-play.local
      VIRTUAL_PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      - zeebe
      - postgres-zeebe-play

  zeebe:
    #image: ghcr.io/camunda-community-hub/zeebe-with-hazelcast-exporter:8.0.5
    image: ghcr.io/camunda-community-hub/zeebe-with-hazelcast-exporter:8.2.0
    environment:
      ZEEBE_LOG_LEVEL: debug
      ZEEBE_CLOCK_CONTROLLED: 'true'
    ports:
      - "26500:26500"
      - "5701:5701"
    volumes:
      - zeebe-data:/usr/local/zeebe/data
  
  postgres-zeebe-play:
    image: postgres:12.2
    restart: always
    environment:
      POSTGRES_PASSWORD: zeebe
    volumes:
      - zeebe-play-data:/var/lib/postgresql/data

# kafka environment
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper-volume:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: docker.io/bitnami/kafka:3.3
    ports:
      - "9093:9093"
    volumes:
      - "kafka-volume:/bitnami"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper

  init-kafka:
    image: docker.io/bitnami/kafka:3.3
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics.sh --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic REQ_TOPIC --replication-factor 1 --partitions 1
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic RES_TOPIC --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      "
volumes:
  zeebe-data:
  zeebe-play-data:
  kafka-volume:
  zookeeper-volume:

networks:
  default:
    name: bpmn-orchestration_network
    driver: bridge